<project xmlns="http://maven.apache.org/POM/4.0.0"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

    <modelVersion>4.0.0</modelVersion>
    <groupId>org.gmazza</groupId>
    <artifactId>blog-samples</artifactId>
    <version>1.0-SNAPSHOT</version>
    <name>Root POM for Blog Samples</name>
    <description>Source code for the web service tutorials listed at http://web-gmazza.rhcloud.com/blog/entry/blog-index</description>
    <packaging>pom</packaging>

    <modules>
        <module>web_service_tutorial</module>
        <module>ssl_for_web_services</module>
        <module>cxf_usernametoken_profile</module>
        <module>cxf_x509_profile</module>
        <module>cxf_sts_tutorial</module>
        <module>junit_soap_client</module>
        <module>jaxws_handler_tutorial</module>
        <module>jaxwshandlers_to_cxfinterceptors</module>
        <module>using_soap_faults</module>
        <module>quartz_scheduled_soap_calls</module>
    </modules>

    <prerequisites>
        <maven>3.0</maven>
    </prerequisites>

    <!-- Note some modules are standalone (do not reference this pom) to help 
         keep the corresponding blog tutorials as clear as possible.
         Others reference this pom and hence rely on the below settings -->

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <cxf.version>3.2.4</cxf.version>
        <spring.version>5.0.5.RELEASE</spring.version>
        <slf4j.version>1.7.25</slf4j.version>
        <wsp.module.name>-- Web Service Provider</wsp.module.name>
        <wspwar.module.name>-- Service WAR file</wspwar.module.name>
        <stswar.module.name>-- STS WAR file</stswar.module.name>
        <wsc.module.name>-- SOAP Client</wsc.module.name>
    </properties>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-context</artifactId>
                <version>${spring.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-web</artifactId>
                <version>${spring.version}</version>
            </dependency>
            <dependency>
	        <groupId>org.springframework</groupId>
	        <artifactId>spring-beans</artifactId>
                <version>${spring.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.cxf</groupId>
                <artifactId>cxf-rt-frontend-jaxws</artifactId>
                <version>${cxf.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.cxf</groupId>
                <artifactId>cxf-rt-transports-http</artifactId>
                <version>${cxf.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.cxf</groupId>
                <artifactId>cxf-rt-ws-security</artifactId>
                <version>${cxf.version}</version>
            </dependency>
            <dependency>
               <groupId>org.apache.cxf</groupId>
               <artifactId>cxf-rt-transports-http-jetty</artifactId>
               <version>${cxf.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.cxf.services.sts</groupId>
                <artifactId>cxf-services-sts-core</artifactId>
                <version>${cxf.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.cxf</groupId>
                <artifactId>cxf-rt-ws-mex</artifactId>
                <version>${cxf.version}</version>
            </dependency>
            <dependency>
                <groupId>org.slf4j</groupId>
                <artifactId>slf4j-jdk14</artifactId>
                <version>${slf4j.version}</version>
                <scope>runtime</scope>
            </dependency>
            <dependency>
                <groupId>org.slf4j</groupId>
                <artifactId>slf4j-simple</artifactId>
                <version>${slf4j.version}</version>
            </dependency>
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
                <version>4.13.1</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>org.apache.derby</groupId>
                <artifactId>derby</artifactId>
                <version>10.14.2.0</version>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.1</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-eclipse-plugin</artifactId>
                <version>2.9</version>
                <configuration>
                    <downloadSources>true</downloadSources>
                    <!--downloadJavadocs>true</downloadJavadocs-->
                    <useProjectReferences>true</useProjectReferences>
                </configuration>
            </plugin>
        </plugins>
        <pluginManagement>
            <plugins>
                <!-- Below plugin provides a separate JAR for the JAX-WS artifacts 
                     (i.e., the objects created by running wsdl2java or wsimport), as this JAR 
                     will also be used by the SOAP client for each web service provider using this plugin. 
                     More info: http://maven.apache.org/plugins/maven-assembly-plugin/ 
                -->
                <plugin>
                    <artifactId>maven-assembly-plugin</artifactId>
                    <version>2.4.1</version>
                    <configuration>
                        <appendAssemblyId>true</appendAssemblyId>
                        <attach>true</attach>
                    </configuration>
                    <executions>
                        <execution>
                            <id>make-assembly</id>
                            <phase>package</phase>
                            <goals>
                                <goal>single</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>
                <!-- Below used with client poms, default params for running client via mvn exec:exec -->
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>exec-maven-plugin</artifactId>
                    <version>1.3.2</version>
                    <executions>
                        <execution>
                            <goals>
                                <goal>exec</goal>
                            </goals>
                        </execution>
                    </executions>
                    <configuration>
                        <executable>java</executable>
                        <arguments>
                            <argument>-classpath</argument>
                            <classpath />
                            <!-- Uncomment below for debug output with CXF. Will 
                                need to configure client-side interceptors and supply a java.util.logging 
                                properties file: http://cxf.apache.org/docs/debugging-and-logging.html 
                                Place the logging file in the client folder. -->
                            <!--argument> 
                                -Djava.util.logging.config.file=mylogging.properties 
                            </argument -->
                            <argument>
                                client.WSClient
                            </argument>
                        </arguments>
                    </configuration>
                </plugin>
                <!-- Below used with CXF service poms -->
                <plugin>
                    <groupId>org.apache.cxf</groupId>
                    <artifactId>cxf-codegen-plugin</artifactId>
                    <version>${cxf.version}</version>
                    <executions>
                        <execution>
                            <goals>
                                <goal>wsdl2java</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>
                <!--
                  For Tomcat 7 and 8, both embedded (tomcat7:run-war) and standalone
                  deployment - tomcat7:deploy/undeploy/redeploy 

                  How to configure Maven and Tomcat to use below plugin:
                  http://web-gmazza.rhcloud.com/blog/entry/web-service-tutorial#maventomcat
                --> 
                <plugin>
                    <groupId>org.apache.tomcat.maven</groupId>
                    <artifactId>tomcat7-maven-plugin</artifactId>
                    <version>2.2</version>
                    <configuration>
                        <server>myTomcat</server>
                        <url>http://localhost:8080/manager/text</url>
                        <path>/${project.build.finalName}</path>
                    </configuration>
                </plugin>
                <!-- Never used; bad URL error message will remind those 
                     inadvertently using tomcat:xxx instead of tomcat7:xxx -->
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>tomcat-maven-plugin</artifactId>
                    <version>1.1</version>
                    <configuration>
                        <url>Use tomcat7:xxx instead of tomcat:xxx goals!</url>
                    </configuration>
                </plugin>
                <!-- Below for WAR submodules, defaults for when creating the WAR file. --> 
                <plugin>
                    <artifactId>maven-war-plugin</artifactId>
                    <version>2.4</version>
                </plugin>
                <!-- Below activates any integration tests where testcases require
                     the JAR or WAR to be created first (see http://tinyurl.com/7zfp7v7) -->
	            <plugin>
	                <groupId>org.apache.maven.plugins</groupId>
	                <artifactId>maven-failsafe-plugin</artifactId>
	                <version>2.21.0</version>
	                <executions>
	                    <execution>
	                        <goals>
	                            <goal>integration-test</goal>
	                            <goal>verify</goal>
	                        </goals>
	                    </execution>
	                </executions>
	            </plugin>
	            <plugin>
	                <groupId>org.codehaus.mojo</groupId>
	                <artifactId>xml-maven-plugin</artifactId>
	                <version>1.0</version>
	            </plugin>
            </plugins>        
        </pluginManagement>
    </build>

</project>
